//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace sitedb.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LEGOEntities : DbContext
    {
        public LEGOEntities()
            : base("name=LEGOEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Details> Details { get; set; }
        public virtual DbSet<Details_has_Materials> Details_has_Materials { get; set; }
        public virtual DbSet<Materials> Materials { get; set; }
        public virtual DbSet<Products> Products { get; set; }
        public virtual DbSet<Products_has_Details> Products_has_Details { get; set; }
    
        public virtual int addDetails(string title, string maker)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var makerParameter = maker != null ?
                new ObjectParameter("Maker", maker) :
                new ObjectParameter("Maker", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addDetails", titleParameter, makerParameter);
        }
    
        public virtual int addDetailsMaterials(Nullable<int> details_ID, Nullable<int> materials_ID, Nullable<int> quantity)
        {
            var details_IDParameter = details_ID.HasValue ?
                new ObjectParameter("Details_ID", details_ID) :
                new ObjectParameter("Details_ID", typeof(int));
    
            var materials_IDParameter = materials_ID.HasValue ?
                new ObjectParameter("Materials_ID", materials_ID) :
                new ObjectParameter("Materials_ID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addDetailsMaterials", details_IDParameter, materials_IDParameter, quantityParameter);
        }
    
        public virtual int addMaterials(string title, Nullable<int> price)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addMaterials", titleParameter, priceParameter);
        }
    
        public virtual int addProducts(string title, string maker)
        {
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            var makerParameter = maker != null ?
                new ObjectParameter("Maker", maker) :
                new ObjectParameter("Maker", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addProducts", titleParameter, makerParameter);
        }
    
        public virtual int addProductsDetails(Nullable<int> products_ID, Nullable<int> details_ID, Nullable<int> quantity)
        {
            var products_IDParameter = products_ID.HasValue ?
                new ObjectParameter("Products_ID", products_ID) :
                new ObjectParameter("Products_ID", typeof(int));
    
            var details_IDParameter = details_ID.HasValue ?
                new ObjectParameter("Details_ID", details_ID) :
                new ObjectParameter("Details_ID", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addProductsDetails", products_IDParameter, details_IDParameter, quantityParameter);
        }
    
        public virtual int delDetails(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delDetails", idParameter);
        }
    
        public virtual int delDetailsMaterials(Nullable<int> idDet, Nullable<int> idMat)
        {
            var idDetParameter = idDet.HasValue ?
                new ObjectParameter("idDet", idDet) :
                new ObjectParameter("idDet", typeof(int));
    
            var idMatParameter = idMat.HasValue ?
                new ObjectParameter("idMat", idMat) :
                new ObjectParameter("idMat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delDetailsMaterials", idDetParameter, idMatParameter);
        }
    
        public virtual int delMaterials(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delMaterials", idParameter);
        }
    
        public virtual int delProducts(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delProducts", idParameter);
        }
    
        public virtual int delProductsDetails(Nullable<int> idProd, Nullable<int> idDet)
        {
            var idProdParameter = idProd.HasValue ?
                new ObjectParameter("idProd", idProd) :
                new ObjectParameter("idProd", typeof(int));
    
            var idDetParameter = idDet.HasValue ?
                new ObjectParameter("idDet", idDet) :
                new ObjectParameter("idDet", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delProductsDetails", idProdParameter, idDetParameter);
        }
    
        public virtual ObjectResult<FIRST_Result> FIRST(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("prodID", prodID) :
                new ObjectParameter("prodID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FIRST_Result>("FIRST", prodIDParameter);
        }
    
        public virtual ObjectResult<string> Procedure(Nullable<int> prodID)
        {
            var prodIDParameter = prodID.HasValue ?
                new ObjectParameter("prodID", prodID) :
                new ObjectParameter("prodID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Procedure", prodIDParameter);
        }
    
        public virtual ObjectResult<SECOND_Result> SECOND(string matTitle)
        {
            var matTitleParameter = matTitle != null ?
                new ObjectParameter("matTitle", matTitle) :
                new ObjectParameter("matTitle", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SECOND_Result>("SECOND", matTitleParameter);
        }
    
        public virtual int updDetails(Nullable<int> id, string title, string maker)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var makerParameter = maker != null ?
                new ObjectParameter("maker", maker) :
                new ObjectParameter("maker", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updDetails", idParameter, titleParameter, makerParameter);
        }
    
        public virtual int updDetailsMaterials(Nullable<int> idDet, Nullable<int> idMat, Nullable<int> quantity)
        {
            var idDetParameter = idDet.HasValue ?
                new ObjectParameter("idDet", idDet) :
                new ObjectParameter("idDet", typeof(int));
    
            var idMatParameter = idMat.HasValue ?
                new ObjectParameter("idMat", idMat) :
                new ObjectParameter("idMat", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updDetailsMaterials", idDetParameter, idMatParameter, quantityParameter);
        }
    
        public virtual int updMaterials(Nullable<int> id, string title, Nullable<int> price)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("price", price) :
                new ObjectParameter("price", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updMaterials", idParameter, titleParameter, priceParameter);
        }
    
        public virtual int updProducts(Nullable<int> id, string title, string maker)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var makerParameter = maker != null ?
                new ObjectParameter("maker", maker) :
                new ObjectParameter("maker", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updProducts", idParameter, titleParameter, makerParameter);
        }
    
        public virtual int updProductsDetails(Nullable<int> idProd, Nullable<int> idDet, Nullable<int> quantity)
        {
            var idProdParameter = idProd.HasValue ?
                new ObjectParameter("idProd", idProd) :
                new ObjectParameter("idProd", typeof(int));
    
            var idDetParameter = idDet.HasValue ?
                new ObjectParameter("idDet", idDet) :
                new ObjectParameter("idDet", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("updProductsDetails", idProdParameter, idDetParameter, quantityParameter);
        }
    }
}
